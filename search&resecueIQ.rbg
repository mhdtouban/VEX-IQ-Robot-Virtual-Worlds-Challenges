<Version>1.0.1</Version>

<ProgrammingBlock type="loop" loopType="Repeat">
    <Parameters>
        <Parameter name="Count" type="int">4</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="comment" commented="1">if empty room</ProgrammingBlock>

<ProgrammingBlock type="loop" loopType="IfThen">
    <Parameters>
        <Parameter name="LHS" type="typedef">getDistanceValue(distanceMM)</Parameter>
        <Parameter name="operator" type="typedef">&gt;=</Parameter>
        <Parameter name="RHS" type="int">300</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="setMultipleMotors">
    <Parameters>
        <Parameter name="speed" type="short">50</Parameter>
        <Parameter name="firstMotor" type="base typedef" typeDef="tMotor">motor1</Parameter>
        <Parameter name="secondMotor" type="base typedef" typeDef="tMotor">motor6</Parameter>
        <Parameter name="thirdMotor" type="base typedef" typeDef="tMotor"/>
        <Parameter name="fourthMotor" type="base typedef" typeDef="tMotor"/>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="OneLineLoop" loopType="WaitUntil">
    <Parameters>
        <Parameter name="LHS" type="typedef">getDistanceValue(distanceMM)</Parameter>
        <Parameter name="operator" type="typedef">&lt;=</Parameter>
        <Parameter name="RHS" type="int">530</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="stopAllMotors"/>

<ProgrammingBlock type="functionCall" function="setTouchLEDColor">
    <Parameters>
        <Parameter name="nDeviceIndex" type="base typedef" typeDef="tSensors">touchLED</Parameter>
        <Parameter name="nColor" type="base typedef" typeDef="TSimpleColors">colorOrange</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="loop" loopType="IfThen">
    <Parameters>
        <Parameter name="LHS" type="typedef">getColorHue(colorDetector)</Parameter>
        <Parameter name="operator" type="typedef">==</Parameter>
        <Parameter name="RHS" type="int">36</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="wait">
    <Parameters>
        <Parameter name="quantity" type="float">5</Parameter>
        <Parameter name="unitType" type="base typedef" typeDef="tMovementUnits">seconds</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="else"/>

<ProgrammingBlock type="comment" commented="1">turn left</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="resetGyro">
    <Parameters>
        <Parameter name="nDeviceIndex" type="base typedef" typeDef="tSensors">port4</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="setMotor">
    <Parameters>
        <Parameter name="motorPort" type="base typedef" typeDef="tMotor">motor1</Parameter>
        <Parameter name="speed" type="short">-50</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="setMotor">
    <Parameters>
        <Parameter name="motorPort" type="base typedef" typeDef="tMotor">motor6</Parameter>
        <Parameter name="speed" type="short">50</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="OneLineLoop" loopType="WaitUntil">
    <Parameters>
        <Parameter name="LHS" type="typedef">getGyroDegrees(gyroSensor)</Parameter>
        <Parameter name="operator" type="typedef">&gt;=</Parameter>
        <Parameter name="RHS" type="int">90</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="stopAllMotors"/>

<ProgrammingBlock type="end"/>

<ProgrammingBlock type="else"/>

<ProgrammingBlock type="loop" loopType="IfThen">
    <Parameters>
        <Parameter name="LHS" type="typedef">getDistanceValue(distanceMM)</Parameter>
        <Parameter name="operator" type="typedef">&lt;=</Parameter>
        <Parameter name="RHS" type="int">200</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="comment" commented="1">if not empty turn left - forward - turn right - forward - left</ProgrammingBlock>

<ProgrammingBlock type="comment">turn left</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="resetGyro">
    <Parameters>
        <Parameter name="nDeviceIndex" type="base typedef" typeDef="tSensors">port4</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="setMotor">
    <Parameters>
        <Parameter name="motorPort" type="base typedef" typeDef="tMotor">motor1</Parameter>
        <Parameter name="speed" type="short">-50</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="setMotor">
    <Parameters>
        <Parameter name="motorPort" type="base typedef" typeDef="tMotor">motor6</Parameter>
        <Parameter name="speed" type="short">50</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="OneLineLoop" loopType="WaitUntil">
    <Parameters>
        <Parameter name="LHS" type="typedef">getGyroDegrees(gyroSensor)</Parameter>
        <Parameter name="operator" type="typedef">&gt;=</Parameter>
        <Parameter name="RHS" type="int">90</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="stopAllMotors"/>

<ProgrammingBlock type="comment">fowrard </ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="forward">
    <Parameters>
        <Parameter name="quantity" type="float">2.2</Parameter>
        <Parameter name="unitType" type="base typedef" typeDef="tMovementUnits">rotations</Parameter>
        <Parameter name="speed" type="short">50</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="comment">turn right</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="resetGyro">
    <Parameters>
        <Parameter name="nDeviceIndex" type="base typedef" typeDef="tSensors">port4</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="setMotor">
    <Parameters>
        <Parameter name="motorPort" type="base typedef" typeDef="tMotor">motor1</Parameter>
        <Parameter name="speed" type="short">50</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="setMotor">
    <Parameters>
        <Parameter name="motorPort" type="base typedef" typeDef="tMotor">motor6</Parameter>
        <Parameter name="speed" type="short">-50</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="OneLineLoop" loopType="WaitUntil">
    <Parameters>
        <Parameter name="LHS" type="typedef">getGyroDegrees(gyroSensor)</Parameter>
        <Parameter name="operator" type="typedef">&lt;=</Parameter>
        <Parameter name="RHS" type="int">-90</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="stopAllMotors"/>

<ProgrammingBlock type="comment">forward</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="forward">
    <Parameters>
        <Parameter name="quantity" type="float">2.2</Parameter>
        <Parameter name="unitType" type="base typedef" typeDef="tMovementUnits">rotations</Parameter>
        <Parameter name="speed" type="short">50</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="comment">turn left</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="resetGyro">
    <Parameters>
        <Parameter name="nDeviceIndex" type="base typedef" typeDef="tSensors">port4</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="setMotor">
    <Parameters>
        <Parameter name="motorPort" type="base typedef" typeDef="tMotor">motor1</Parameter>
        <Parameter name="speed" type="short">-50</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="setMotor">
    <Parameters>
        <Parameter name="motorPort" type="base typedef" typeDef="tMotor">motor6</Parameter>
        <Parameter name="speed" type="short">50</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="OneLineLoop" loopType="WaitUntil">
    <Parameters>
        <Parameter name="LHS" type="typedef">getGyroDegrees(gyroSensor)</Parameter>
        <Parameter name="operator" type="typedef">&gt;=</Parameter>
        <Parameter name="RHS" type="int">90</Parameter>
    </Parameters>
</ProgrammingBlock>

<ProgrammingBlock type="functionCall" function="stopAllMotors"/>

<ProgrammingBlock type="else"/>

<ProgrammingBlock type="functionCall" function="stopAllMotors"/>

<ProgrammingBlock type="end"/>

<ProgrammingBlock type="end"/>

<ProgrammingBlock type="end"/>

<RobotConfiguration>#pragma config(Sensor, port2,  touchLED,       sensorVexIQ_LED)
#pragma config(Sensor, port3,  colorDetector,  sensorVexIQ_ColorHue)
#pragma config(Sensor, port4,  gyroSensor,     sensorVexIQ_Gyro)
#pragma config(Sensor, port7,  distanceMM,     sensorVexIQ_Distance)
#pragma config(Sensor, port8,  bumpSwitch,     sensorVexIQ_Touch)
#pragma config(Motor,  motor1,          leftMotor,     tmotorVexIQ, openLoop, driveLeft, encoder)
#pragma config(Motor,  motor6,          rightMotor,    tmotorVexIQ, openLoop, reversed, driveRight, encoder)
#pragma config(Motor,  motor10,         armMotor,      tmotorVexIQ, openLoop, encoder)
#pragma config(Motor,  motor11,         clawMotor,     tmotorVexIQ, openLoop, encoder)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//
</RobotConfiguration>

<CSource>#pragma config(Sensor, port2,  touchLED,       sensorVexIQ_LED)
#pragma config(Sensor, port3,  colorDetector,  sensorVexIQ_ColorHue)
#pragma config(Sensor, port4,  gyroSensor,     sensorVexIQ_Gyro)
#pragma config(Sensor, port7,  distanceMM,     sensorVexIQ_Distance)
#pragma config(Sensor, port8,  bumpSwitch,     sensorVexIQ_Touch)
#pragma config(Motor,  motor1,          leftMotor,     tmotorVexIQ, openLoop, driveLeft, encoder)
#pragma config(Motor,  motor6,          rightMotor,    tmotorVexIQ, openLoop, reversed, driveRight, encoder)
#pragma config(Motor,  motor10,         armMotor,      tmotorVexIQ, openLoop, encoder)
#pragma config(Motor,  motor11,         clawMotor,     tmotorVexIQ, openLoop, encoder)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//


task main()
{
	repeat (4) {
		//// if empty room
		if (getDistanceValue(distanceMM) &gt;= 300) {
			setMultipleMotors(50, motor1, motor6, , );
			waitUntil (getDistanceValue(distanceMM) &lt;= 530);
			stopAllMotors();
			setTouchLEDColor(touchLED, colorOrange);
			if (getColorHue(colorDetector) == 36) {
				wait(5, seconds);
			} else {
				//// turn left
				resetGyro(port4);
				setMotor(motor1, -50);
				setMotor(motor6, 50);
				waitUntil (getGyroDegrees(gyroSensor) &gt;= 90);
				stopAllMotors();
			}
		} else {
			if (getDistanceValue(distanceMM) &lt;= 200) {
				//// if not empty turn left - forward - turn right - forward - left
				// turn left
				resetGyro(port4);
				setMotor(motor1, -50);
				setMotor(motor6, 50);
				waitUntil (getGyroDegrees(gyroSensor) &gt;= 90);
				stopAllMotors();
				// fowrard 
				forward(2.2, rotations, 50);
				// turn right
				resetGyro(port4);
				setMotor(motor1, 50);
				setMotor(motor6, -50);
				waitUntil (getGyroDegrees(gyroSensor) &lt;= -90);
				stopAllMotors();
				// forward
				forward(2.2, rotations, 50);
				// turn left
				resetGyro(port4);
				setMotor(motor1, -50);
				setMotor(motor6, 50);
				waitUntil (getGyroDegrees(gyroSensor) &gt;= 90);
				stopAllMotors();
			} else {
				stopAllMotors();
			}
		}
	}
}
</CSource>
